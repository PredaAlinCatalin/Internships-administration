// <auto-generated />
using System;
using Licenta.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Licenta.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210426211412_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Licenta.Models.Aptitude", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Aptitudes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "c++"
                        },
                        new
                        {
                            Id = 2,
                            Name = "c"
                        },
                        new
                        {
                            Id = 3,
                            Name = "c#"
                        });
                });

            modelBuilder.Entity("Licenta.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Video game"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Desktop developer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Web"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Linux"
                        });
                });

            modelBuilder.Entity("Licenta.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bucuresti"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Timisoara"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cluj"
                        });
                });

            modelBuilder.Entity("Licenta.Models.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Licenta.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdStudent")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Institution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdStudent");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Licenta.Models.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdStudent")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdStudent");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("Licenta.Models.ForeignLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ForeignLanguages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Engleza"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Franceza"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Germana"
                        });
                });

            modelBuilder.Entity("Licenta.Models.Internship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Deadline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCity")
                        .HasColumnType("int");

                    b.Property<string>("IdCompany")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MaxNumberStudents")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdCity");

                    b.HasIndex("IdCompany");

                    b.ToTable("Internships");
                });

            modelBuilder.Entity("Licenta.Models.InternshipAptitude", b =>
                {
                    b.Property<int>("IdInternship")
                        .HasColumnType("int");

                    b.Property<int>("IdAptitude")
                        .HasColumnType("int");

                    b.HasKey("IdInternship", "IdAptitude");

                    b.HasIndex("IdAptitude");

                    b.ToTable("InternshipAptitudes");
                });

            modelBuilder.Entity("Licenta.Models.InternshipCategory", b =>
                {
                    b.Property<int>("IdInternship")
                        .HasColumnType("int");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int");

                    b.HasKey("IdInternship", "IdCategory");

                    b.HasIndex("IdCategory");

                    b.ToTable("InternshipCategories");
                });

            modelBuilder.Entity("Licenta.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdStudent")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdStudent");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Licenta.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("AnnualAverage")
                        .HasColumnType("float");

                    b.Property<string>("Faculty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Passions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Licenta.Models.StudentAptitude", b =>
                {
                    b.Property<string>("IdStudent")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdAptitude")
                        .HasColumnType("int");

                    b.HasKey("IdStudent", "IdAptitude");

                    b.HasIndex("IdAptitude");

                    b.ToTable("StudentAptitudes");
                });

            modelBuilder.Entity("Licenta.Models.StudentForeignLanguage", b =>
                {
                    b.Property<string>("IdStudent")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdForeignLanguage")
                        .HasColumnType("int");

                    b.HasKey("IdStudent", "IdForeignLanguage");

                    b.HasIndex("IdForeignLanguage");

                    b.ToTable("StudentForeignLanguages");
                });

            modelBuilder.Entity("Licenta.Models.StudentInternship", b =>
                {
                    b.Property<string>("IdStudent")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdInternship")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InternshipGrade")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdStudent", "IdInternship");

                    b.HasIndex("IdInternship");

                    b.ToTable("StudentInternships");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "4d700469-f085-48c8-b9a6-c4cce668fd45",
                            ConcurrencyStamp = "96b4ea0b-51bc-4090-afed-949e6d66b331",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "419851ab-3b1a-4d40-96f7-351da182572f",
                            ConcurrencyStamp = "6c0e562f-4119-4750-ab5b-f7b4fd69cc9f",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Licenta.Models.Company", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Licenta.Models.Education", b =>
                {
                    b.HasOne("Licenta.Models.Student", "Student")
                        .WithMany("Educations")
                        .HasForeignKey("IdStudent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Licenta.Models.Experience", b =>
                {
                    b.HasOne("Licenta.Models.Student", "Student")
                        .WithMany("Experiences")
                        .HasForeignKey("IdStudent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Licenta.Models.Internship", b =>
                {
                    b.HasOne("Licenta.Models.City", "City")
                        .WithMany("Internships")
                        .HasForeignKey("IdCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Licenta.Models.Company", "Company")
                        .WithMany("Internships")
                        .HasForeignKey("IdCompany");

                    b.Navigation("City");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Licenta.Models.InternshipAptitude", b =>
                {
                    b.HasOne("Licenta.Models.Aptitude", "Aptitude")
                        .WithMany("InternshipAptitudes")
                        .HasForeignKey("IdAptitude")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Licenta.Models.Internship", "Internship")
                        .WithMany("InternshipAptitudes")
                        .HasForeignKey("IdInternship")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aptitude");

                    b.Navigation("Internship");
                });

            modelBuilder.Entity("Licenta.Models.InternshipCategory", b =>
                {
                    b.HasOne("Licenta.Models.Category", "Category")
                        .WithMany("InternshipCategories")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Licenta.Models.Internship", "Internship")
                        .WithMany("InternshipCategories")
                        .HasForeignKey("IdInternship")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Internship");
                });

            modelBuilder.Entity("Licenta.Models.Project", b =>
                {
                    b.HasOne("Licenta.Models.Student", "Student")
                        .WithMany("Projects")
                        .HasForeignKey("IdStudent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Licenta.Models.Student", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Licenta.Models.StudentAptitude", b =>
                {
                    b.HasOne("Licenta.Models.Aptitude", "Aptitude")
                        .WithMany("StudentAptitudes")
                        .HasForeignKey("IdAptitude")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Licenta.Models.Student", "Student")
                        .WithMany("StudentAptitudes")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aptitude");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Licenta.Models.StudentForeignLanguage", b =>
                {
                    b.HasOne("Licenta.Models.ForeignLanguage", "ForeignLanguage")
                        .WithMany("StudentForeignLanguages")
                        .HasForeignKey("IdForeignLanguage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Licenta.Models.Student", "Student")
                        .WithMany("StudentForeignLanguages")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForeignLanguage");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Licenta.Models.StudentInternship", b =>
                {
                    b.HasOne("Licenta.Models.Internship", "Internship")
                        .WithMany("StudentInternships")
                        .HasForeignKey("IdInternship")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Licenta.Models.Student", "Student")
                        .WithMany("StudentInternships")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Internship");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Licenta.Models.Aptitude", b =>
                {
                    b.Navigation("InternshipAptitudes");

                    b.Navigation("StudentAptitudes");
                });

            modelBuilder.Entity("Licenta.Models.Category", b =>
                {
                    b.Navigation("InternshipCategories");
                });

            modelBuilder.Entity("Licenta.Models.City", b =>
                {
                    b.Navigation("Internships");
                });

            modelBuilder.Entity("Licenta.Models.Company", b =>
                {
                    b.Navigation("Internships");
                });

            modelBuilder.Entity("Licenta.Models.ForeignLanguage", b =>
                {
                    b.Navigation("StudentForeignLanguages");
                });

            modelBuilder.Entity("Licenta.Models.Internship", b =>
                {
                    b.Navigation("InternshipAptitudes");

                    b.Navigation("InternshipCategories");

                    b.Navigation("StudentInternships");
                });

            modelBuilder.Entity("Licenta.Models.Student", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("Projects");

                    b.Navigation("StudentAptitudes");

                    b.Navigation("StudentForeignLanguages");

                    b.Navigation("StudentInternships");
                });
#pragma warning restore 612, 618
        }
    }
}
